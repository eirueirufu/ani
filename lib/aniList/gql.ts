/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 */
const documents = {
    "\n  query media($id: Int, $page: Int) {\n    Media(id: $id) {\n      id\n      characters(page: $page, sort: [ROLE, RELEVANCE, ID]) {\n        pageInfo {\n          total\n          perPage\n          currentPage\n          lastPage\n          hasNextPage\n        }\n        edges {\n          id\n          role\n          name\n          voiceActorRoles(sort: [RELEVANCE, ID]) {\n            roleNotes\n            dubGroup\n            voiceActor {\n              id\n              name {\n                userPreferred\n              }\n              language: languageV2\n              image {\n                large\n              }\n            }\n          }\n          node {\n            id\n            name {\n              userPreferred\n            }\n            image {\n              large\n            }\n          }\n        }\n      }\n    }\n  }\n": types.MediaDocument,
    "\n  query GetMediaStaff($id: Int, $page: Int) {\n    Media(id: $id) {\n      id\n      staff(page: $page, sort: [RELEVANCE, ID]) {\n        pageInfo {\n          total\n          perPage\n          currentPage\n          lastPage\n          hasNextPage\n        }\n        edges {\n          id\n          role\n          node {\n            id\n            name {\n              userPreferred\n            }\n            image {\n              large\n            }\n          }\n        }\n      }\n    }\n  }\n": types.GetMediaStaffDocument,
    "\n  query GetSearch(\n    $page: Int = 1\n    $id: Int\n    $type: MediaType\n    $isAdult: Boolean = false\n    $search: String\n    $format: [MediaFormat]\n    $status: MediaStatus\n    $countryOfOrigin: CountryCode\n    $source: MediaSource\n    $season: MediaSeason\n    $seasonYear: Int\n    $year: String\n    $onList: Boolean\n    $yearLesser: FuzzyDateInt\n    $yearGreater: FuzzyDateInt\n    $episodeLesser: Int\n    $episodeGreater: Int\n    $durationLesser: Int\n    $durationGreater: Int\n    $chapterLesser: Int\n    $chapterGreater: Int\n    $volumeLesser: Int\n    $volumeGreater: Int\n    $licensedBy: [Int]\n    $isLicensed: Boolean\n    $genres: [String]\n    $excludedGenres: [String]\n    $tags: [String]\n    $excludedTags: [String]\n    $minimumTagRank: Int\n    $sort: [MediaSort] = [POPULARITY_DESC, SCORE_DESC]\n  ) {\n    Page(page: $page, perPage: 20) {\n      pageInfo {\n        total\n        perPage\n        currentPage\n        lastPage\n        hasNextPage\n      }\n      media(\n        id: $id\n        type: $type\n        season: $season\n        format_in: $format\n        status: $status\n        countryOfOrigin: $countryOfOrigin\n        source: $source\n        search: $search\n        onList: $onList\n        seasonYear: $seasonYear\n        startDate_like: $year\n        startDate_lesser: $yearLesser\n        startDate_greater: $yearGreater\n        episodes_lesser: $episodeLesser\n        episodes_greater: $episodeGreater\n        duration_lesser: $durationLesser\n        duration_greater: $durationGreater\n        chapters_lesser: $chapterLesser\n        chapters_greater: $chapterGreater\n        volumes_lesser: $volumeLesser\n        volumes_greater: $volumeGreater\n        licensedById_in: $licensedBy\n        isLicensed: $isLicensed\n        genre_in: $genres\n        genre_not_in: $excludedGenres\n        tag_in: $tags\n        tag_not_in: $excludedTags\n        minimumTagRank: $minimumTagRank\n        sort: $sort\n        isAdult: $isAdult\n      ) {\n        id\n        title {\n          userPreferred\n        }\n        coverImage {\n          extraLarge\n          large\n          color\n        }\n        startDate {\n          year\n          month\n          day\n        }\n        endDate {\n          year\n          month\n          day\n        }\n        bannerImage\n        season\n        seasonYear\n        description\n        type\n        format\n        status(version: 2)\n        episodes\n        duration\n        chapters\n        volumes\n        genres\n        isAdult\n        averageScore\n        popularity\n        nextAiringEpisode {\n          airingAt\n          timeUntilAiring\n          episode\n        }\n        mediaListEntry {\n          id\n          status\n        }\n        studios(isMain: true) {\n          edges {\n            isMain\n            node {\n              id\n              name\n            }\n          }\n        }\n      }\n    }\n  }\n": types.GetSearchDocument,
    "\n  query GetStaff(\n    $id: Int\n    $sort: [MediaSort]\n    $characterPage: Int\n    $staffPage: Int\n    $onList: Boolean\n    $type: MediaType\n    $withCharacterRoles: Boolean = false\n    $withStaffRoles: Boolean = false\n  ) {\n    Staff(id: $id) {\n      id\n      name {\n        first\n        middle\n        last\n        full\n        native\n        userPreferred\n        alternative\n      }\n      image {\n        large\n      }\n      description(asHtml: true)\n      favourites\n      isFavourite\n      isFavouriteBlocked\n      age\n      gender\n      yearsActive\n      homeTown\n      bloodType\n      primaryOccupations\n      dateOfBirth {\n        year\n        month\n        day\n      }\n      dateOfDeath {\n        year\n        month\n        day\n      }\n      language: languageV2\n      characterMedia(page: $characterPage, sort: $sort, onList: $onList)\n        @include(if: $withCharacterRoles) {\n        pageInfo {\n          total\n          perPage\n          currentPage\n          lastPage\n          hasNextPage\n        }\n        edges {\n          characterRole\n          characterName\n          node {\n            id\n            type\n            bannerImage\n            isAdult\n            title {\n              userPreferred\n            }\n            coverImage {\n              large\n            }\n            startDate {\n              year\n            }\n            mediaListEntry {\n              id\n              status\n            }\n          }\n          characters {\n            id\n            name {\n              userPreferred\n            }\n            image {\n              large\n            }\n          }\n        }\n      }\n      staffMedia(page: $staffPage, type: $type, sort: $sort, onList: $onList)\n        @include(if: $withStaffRoles) {\n        pageInfo {\n          total\n          perPage\n          currentPage\n          lastPage\n          hasNextPage\n        }\n        edges {\n          staffRole\n          node {\n            id\n            type\n            isAdult\n            title {\n              userPreferred\n            }\n            coverImage {\n              large\n            }\n            mediaListEntry {\n              id\n              status\n            }\n          }\n        }\n      }\n    }\n  }\n": types.GetStaffDocument,
    "\n  query GetHome(\n    $season: MediaSeason\n    $seasonYear: Int\n    $nextSeason: MediaSeason\n    $nextYear: Int\n  ) {\n    trending: Page(page: 1, perPage: 6) {\n      media(sort: TRENDING_DESC, type: ANIME, isAdult: false) {\n        ...media\n      }\n    }\n    season: Page(page: 1, perPage: 6) {\n      media(\n        season: $season\n        seasonYear: $seasonYear\n        sort: POPULARITY_DESC\n        type: ANIME\n        isAdult: false\n      ) {\n        ...media\n      }\n    }\n    nextSeason: Page(page: 1, perPage: 6) {\n      media(\n        season: $nextSeason\n        seasonYear: $nextYear\n        sort: POPULARITY_DESC\n        type: ANIME\n        isAdult: false\n      ) {\n        ...media\n      }\n    }\n    popular: Page(page: 1, perPage: 6) {\n      media(sort: POPULARITY_DESC, type: ANIME, isAdult: false) {\n        ...media\n      }\n    }\n    top: Page(page: 1, perPage: 10) {\n      media(sort: SCORE_DESC, type: ANIME, isAdult: false) {\n        ...media\n      }\n    }\n  }\n": types.GetHomeDocument,
    "\n  fragment media on Media {\n    id\n    title {\n      userPreferred\n      native\n    }\n    coverImage {\n      extraLarge\n      large\n      color\n    }\n    startDate {\n      year\n      month\n      day\n    }\n    endDate {\n      year\n      month\n      day\n    }\n    bannerImage\n    season\n    seasonYear\n    description\n    type\n    format\n    status(version: 2)\n    episodes\n    duration\n    chapters\n    volumes\n    genres\n    isAdult\n    averageScore\n    popularity\n    mediaListEntry {\n      id\n      status\n    }\n    nextAiringEpisode {\n      airingAt\n      timeUntilAiring\n      episode\n    }\n    studios(isMain: true) {\n      edges {\n        isMain\n        node {\n          id\n          name\n        }\n      }\n    }\n  }\n": types.MediaFragmentDoc,
    "\n  query GetMedia($id: Int, $type: MediaType, $isAdult: Boolean) {\n    Media(id: $id, type: $type, isAdult: $isAdult) {\n      id\n      title {\n        userPreferred\n        romaji\n        english\n        native\n      }\n      coverImage {\n        extraLarge\n        large\n      }\n      bannerImage\n      startDate {\n        year\n        month\n        day\n      }\n      endDate {\n        year\n        month\n        day\n      }\n      description\n      season\n      seasonYear\n      type\n      format\n      status(version: 2)\n      episodes\n      duration\n      chapters\n      volumes\n      genres\n      synonyms\n      source(version: 3)\n      isAdult\n      isLocked\n      meanScore\n      averageScore\n      popularity\n      favourites\n      isFavouriteBlocked\n      hashtag\n      countryOfOrigin\n      isLicensed\n      isFavourite\n      isRecommendationBlocked\n      isFavouriteBlocked\n      isReviewBlocked\n      nextAiringEpisode {\n        airingAt\n        timeUntilAiring\n        episode\n      }\n      relations {\n        ...GetMediaOverviewRelations\n      }\n      characterPreview: characters(perPage: 6, sort: [ROLE, RELEVANCE, ID]) {\n        ...GetMediaOverviewCharacters\n      }\n      staffPreview: staff(perPage: 8, sort: [RELEVANCE, ID]) {\n        ...GetMediaOverviewStaffs\n      }\n      studios {\n        edges {\n          isMain\n          node {\n            id\n            name\n          }\n        }\n      }\n      reviewPreview: reviews(perPage: 2, sort: [RATING_DESC, ID]) {\n        pageInfo {\n          total\n        }\n        nodes {\n          id\n          summary\n          rating\n          ratingAmount\n          user {\n            id\n            name\n            avatar {\n              large\n            }\n          }\n        }\n      }\n      recommendations(perPage: 6, sort: [RATING_DESC, ID]) {\n        ...GetMediaOverviewRecommendations\n      }\n      externalLinks {\n        id\n        site\n        url\n        type\n        language\n        color\n        icon\n        notes\n        isDisabled\n      }\n      streamingEpisodes {\n        site\n        title\n        thumbnail\n        url\n      }\n      trailer {\n        ...GetMediaOverviewTrailer\n      }\n      rankings {\n        id\n        rank\n        type\n        format\n        year\n        season\n        allTime\n        context\n      }\n      tags {\n        id\n        name\n        description\n        rank\n        isMediaSpoiler\n        isGeneralSpoiler\n        userId\n      }\n      mediaListEntry {\n        id\n        status\n        score\n      }\n      stats {\n        statusDistribution {\n          status\n          amount\n        }\n        scoreDistribution {\n          score\n          amount\n        }\n      }\n    }\n  }\n": types.GetMediaDocument,
    "\n  fragment GetMediaOverviewRelations on MediaConnection {\n    edges {\n      id\n      relationType(version: 2)\n      node {\n        id\n        title {\n          userPreferred\n        }\n        format\n        type\n        status(version: 2)\n        bannerImage\n        coverImage {\n          large\n        }\n      }\n    }\n  }\n": types.GetMediaOverviewRelationsFragmentDoc,
    "\n  fragment GetMediaOverviewCharacters on CharacterConnection {\n    edges {\n      id\n      role\n      name\n      voiceActors(language: JAPANESE, sort: [RELEVANCE, ID]) {\n        id\n        name {\n          userPreferred\n        }\n        language: languageV2\n        image {\n          large\n        }\n      }\n      node {\n        id\n        name {\n          userPreferred\n        }\n        image {\n          large\n        }\n      }\n    }\n  }\n": types.GetMediaOverviewCharactersFragmentDoc,
    "\n  fragment GetMediaOverviewStaffs on StaffConnection {\n    edges {\n      id\n      role\n      node {\n        id\n        name {\n          userPreferred\n        }\n        language: languageV2\n        image {\n          large\n        }\n      }\n    }\n  }\n": types.GetMediaOverviewStaffsFragmentDoc,
    "\n  fragment GetMediaOverviewTrailer on MediaTrailer {\n    id\n    site\n  }\n": types.GetMediaOverviewTrailerFragmentDoc,
    "\n  fragment GetMediaOverviewRecommendations on RecommendationConnection {\n    pageInfo {\n      total\n    }\n    nodes {\n      id\n      rating\n      userRating\n      mediaRecommendation {\n        id\n        title {\n          userPreferred\n        }\n        format\n        type\n        status(version: 2)\n        bannerImage\n        coverImage {\n          large\n        }\n      }\n      user {\n        id\n        name\n        avatar {\n          large\n        }\n      }\n    }\n  }\n": types.GetMediaOverviewRecommendationsFragmentDoc,
};

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = graphql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function graphql(source: string): unknown;

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query media($id: Int, $page: Int) {\n    Media(id: $id) {\n      id\n      characters(page: $page, sort: [ROLE, RELEVANCE, ID]) {\n        pageInfo {\n          total\n          perPage\n          currentPage\n          lastPage\n          hasNextPage\n        }\n        edges {\n          id\n          role\n          name\n          voiceActorRoles(sort: [RELEVANCE, ID]) {\n            roleNotes\n            dubGroup\n            voiceActor {\n              id\n              name {\n                userPreferred\n              }\n              language: languageV2\n              image {\n                large\n              }\n            }\n          }\n          node {\n            id\n            name {\n              userPreferred\n            }\n            image {\n              large\n            }\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query media($id: Int, $page: Int) {\n    Media(id: $id) {\n      id\n      characters(page: $page, sort: [ROLE, RELEVANCE, ID]) {\n        pageInfo {\n          total\n          perPage\n          currentPage\n          lastPage\n          hasNextPage\n        }\n        edges {\n          id\n          role\n          name\n          voiceActorRoles(sort: [RELEVANCE, ID]) {\n            roleNotes\n            dubGroup\n            voiceActor {\n              id\n              name {\n                userPreferred\n              }\n              language: languageV2\n              image {\n                large\n              }\n            }\n          }\n          node {\n            id\n            name {\n              userPreferred\n            }\n            image {\n              large\n            }\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetMediaStaff($id: Int, $page: Int) {\n    Media(id: $id) {\n      id\n      staff(page: $page, sort: [RELEVANCE, ID]) {\n        pageInfo {\n          total\n          perPage\n          currentPage\n          lastPage\n          hasNextPage\n        }\n        edges {\n          id\n          role\n          node {\n            id\n            name {\n              userPreferred\n            }\n            image {\n              large\n            }\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetMediaStaff($id: Int, $page: Int) {\n    Media(id: $id) {\n      id\n      staff(page: $page, sort: [RELEVANCE, ID]) {\n        pageInfo {\n          total\n          perPage\n          currentPage\n          lastPage\n          hasNextPage\n        }\n        edges {\n          id\n          role\n          node {\n            id\n            name {\n              userPreferred\n            }\n            image {\n              large\n            }\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetSearch(\n    $page: Int = 1\n    $id: Int\n    $type: MediaType\n    $isAdult: Boolean = false\n    $search: String\n    $format: [MediaFormat]\n    $status: MediaStatus\n    $countryOfOrigin: CountryCode\n    $source: MediaSource\n    $season: MediaSeason\n    $seasonYear: Int\n    $year: String\n    $onList: Boolean\n    $yearLesser: FuzzyDateInt\n    $yearGreater: FuzzyDateInt\n    $episodeLesser: Int\n    $episodeGreater: Int\n    $durationLesser: Int\n    $durationGreater: Int\n    $chapterLesser: Int\n    $chapterGreater: Int\n    $volumeLesser: Int\n    $volumeGreater: Int\n    $licensedBy: [Int]\n    $isLicensed: Boolean\n    $genres: [String]\n    $excludedGenres: [String]\n    $tags: [String]\n    $excludedTags: [String]\n    $minimumTagRank: Int\n    $sort: [MediaSort] = [POPULARITY_DESC, SCORE_DESC]\n  ) {\n    Page(page: $page, perPage: 20) {\n      pageInfo {\n        total\n        perPage\n        currentPage\n        lastPage\n        hasNextPage\n      }\n      media(\n        id: $id\n        type: $type\n        season: $season\n        format_in: $format\n        status: $status\n        countryOfOrigin: $countryOfOrigin\n        source: $source\n        search: $search\n        onList: $onList\n        seasonYear: $seasonYear\n        startDate_like: $year\n        startDate_lesser: $yearLesser\n        startDate_greater: $yearGreater\n        episodes_lesser: $episodeLesser\n        episodes_greater: $episodeGreater\n        duration_lesser: $durationLesser\n        duration_greater: $durationGreater\n        chapters_lesser: $chapterLesser\n        chapters_greater: $chapterGreater\n        volumes_lesser: $volumeLesser\n        volumes_greater: $volumeGreater\n        licensedById_in: $licensedBy\n        isLicensed: $isLicensed\n        genre_in: $genres\n        genre_not_in: $excludedGenres\n        tag_in: $tags\n        tag_not_in: $excludedTags\n        minimumTagRank: $minimumTagRank\n        sort: $sort\n        isAdult: $isAdult\n      ) {\n        id\n        title {\n          userPreferred\n        }\n        coverImage {\n          extraLarge\n          large\n          color\n        }\n        startDate {\n          year\n          month\n          day\n        }\n        endDate {\n          year\n          month\n          day\n        }\n        bannerImage\n        season\n        seasonYear\n        description\n        type\n        format\n        status(version: 2)\n        episodes\n        duration\n        chapters\n        volumes\n        genres\n        isAdult\n        averageScore\n        popularity\n        nextAiringEpisode {\n          airingAt\n          timeUntilAiring\n          episode\n        }\n        mediaListEntry {\n          id\n          status\n        }\n        studios(isMain: true) {\n          edges {\n            isMain\n            node {\n              id\n              name\n            }\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetSearch(\n    $page: Int = 1\n    $id: Int\n    $type: MediaType\n    $isAdult: Boolean = false\n    $search: String\n    $format: [MediaFormat]\n    $status: MediaStatus\n    $countryOfOrigin: CountryCode\n    $source: MediaSource\n    $season: MediaSeason\n    $seasonYear: Int\n    $year: String\n    $onList: Boolean\n    $yearLesser: FuzzyDateInt\n    $yearGreater: FuzzyDateInt\n    $episodeLesser: Int\n    $episodeGreater: Int\n    $durationLesser: Int\n    $durationGreater: Int\n    $chapterLesser: Int\n    $chapterGreater: Int\n    $volumeLesser: Int\n    $volumeGreater: Int\n    $licensedBy: [Int]\n    $isLicensed: Boolean\n    $genres: [String]\n    $excludedGenres: [String]\n    $tags: [String]\n    $excludedTags: [String]\n    $minimumTagRank: Int\n    $sort: [MediaSort] = [POPULARITY_DESC, SCORE_DESC]\n  ) {\n    Page(page: $page, perPage: 20) {\n      pageInfo {\n        total\n        perPage\n        currentPage\n        lastPage\n        hasNextPage\n      }\n      media(\n        id: $id\n        type: $type\n        season: $season\n        format_in: $format\n        status: $status\n        countryOfOrigin: $countryOfOrigin\n        source: $source\n        search: $search\n        onList: $onList\n        seasonYear: $seasonYear\n        startDate_like: $year\n        startDate_lesser: $yearLesser\n        startDate_greater: $yearGreater\n        episodes_lesser: $episodeLesser\n        episodes_greater: $episodeGreater\n        duration_lesser: $durationLesser\n        duration_greater: $durationGreater\n        chapters_lesser: $chapterLesser\n        chapters_greater: $chapterGreater\n        volumes_lesser: $volumeLesser\n        volumes_greater: $volumeGreater\n        licensedById_in: $licensedBy\n        isLicensed: $isLicensed\n        genre_in: $genres\n        genre_not_in: $excludedGenres\n        tag_in: $tags\n        tag_not_in: $excludedTags\n        minimumTagRank: $minimumTagRank\n        sort: $sort\n        isAdult: $isAdult\n      ) {\n        id\n        title {\n          userPreferred\n        }\n        coverImage {\n          extraLarge\n          large\n          color\n        }\n        startDate {\n          year\n          month\n          day\n        }\n        endDate {\n          year\n          month\n          day\n        }\n        bannerImage\n        season\n        seasonYear\n        description\n        type\n        format\n        status(version: 2)\n        episodes\n        duration\n        chapters\n        volumes\n        genres\n        isAdult\n        averageScore\n        popularity\n        nextAiringEpisode {\n          airingAt\n          timeUntilAiring\n          episode\n        }\n        mediaListEntry {\n          id\n          status\n        }\n        studios(isMain: true) {\n          edges {\n            isMain\n            node {\n              id\n              name\n            }\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetStaff(\n    $id: Int\n    $sort: [MediaSort]\n    $characterPage: Int\n    $staffPage: Int\n    $onList: Boolean\n    $type: MediaType\n    $withCharacterRoles: Boolean = false\n    $withStaffRoles: Boolean = false\n  ) {\n    Staff(id: $id) {\n      id\n      name {\n        first\n        middle\n        last\n        full\n        native\n        userPreferred\n        alternative\n      }\n      image {\n        large\n      }\n      description(asHtml: true)\n      favourites\n      isFavourite\n      isFavouriteBlocked\n      age\n      gender\n      yearsActive\n      homeTown\n      bloodType\n      primaryOccupations\n      dateOfBirth {\n        year\n        month\n        day\n      }\n      dateOfDeath {\n        year\n        month\n        day\n      }\n      language: languageV2\n      characterMedia(page: $characterPage, sort: $sort, onList: $onList)\n        @include(if: $withCharacterRoles) {\n        pageInfo {\n          total\n          perPage\n          currentPage\n          lastPage\n          hasNextPage\n        }\n        edges {\n          characterRole\n          characterName\n          node {\n            id\n            type\n            bannerImage\n            isAdult\n            title {\n              userPreferred\n            }\n            coverImage {\n              large\n            }\n            startDate {\n              year\n            }\n            mediaListEntry {\n              id\n              status\n            }\n          }\n          characters {\n            id\n            name {\n              userPreferred\n            }\n            image {\n              large\n            }\n          }\n        }\n      }\n      staffMedia(page: $staffPage, type: $type, sort: $sort, onList: $onList)\n        @include(if: $withStaffRoles) {\n        pageInfo {\n          total\n          perPage\n          currentPage\n          lastPage\n          hasNextPage\n        }\n        edges {\n          staffRole\n          node {\n            id\n            type\n            isAdult\n            title {\n              userPreferred\n            }\n            coverImage {\n              large\n            }\n            mediaListEntry {\n              id\n              status\n            }\n          }\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetStaff(\n    $id: Int\n    $sort: [MediaSort]\n    $characterPage: Int\n    $staffPage: Int\n    $onList: Boolean\n    $type: MediaType\n    $withCharacterRoles: Boolean = false\n    $withStaffRoles: Boolean = false\n  ) {\n    Staff(id: $id) {\n      id\n      name {\n        first\n        middle\n        last\n        full\n        native\n        userPreferred\n        alternative\n      }\n      image {\n        large\n      }\n      description(asHtml: true)\n      favourites\n      isFavourite\n      isFavouriteBlocked\n      age\n      gender\n      yearsActive\n      homeTown\n      bloodType\n      primaryOccupations\n      dateOfBirth {\n        year\n        month\n        day\n      }\n      dateOfDeath {\n        year\n        month\n        day\n      }\n      language: languageV2\n      characterMedia(page: $characterPage, sort: $sort, onList: $onList)\n        @include(if: $withCharacterRoles) {\n        pageInfo {\n          total\n          perPage\n          currentPage\n          lastPage\n          hasNextPage\n        }\n        edges {\n          characterRole\n          characterName\n          node {\n            id\n            type\n            bannerImage\n            isAdult\n            title {\n              userPreferred\n            }\n            coverImage {\n              large\n            }\n            startDate {\n              year\n            }\n            mediaListEntry {\n              id\n              status\n            }\n          }\n          characters {\n            id\n            name {\n              userPreferred\n            }\n            image {\n              large\n            }\n          }\n        }\n      }\n      staffMedia(page: $staffPage, type: $type, sort: $sort, onList: $onList)\n        @include(if: $withStaffRoles) {\n        pageInfo {\n          total\n          perPage\n          currentPage\n          lastPage\n          hasNextPage\n        }\n        edges {\n          staffRole\n          node {\n            id\n            type\n            isAdult\n            title {\n              userPreferred\n            }\n            coverImage {\n              large\n            }\n            mediaListEntry {\n              id\n              status\n            }\n          }\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetHome(\n    $season: MediaSeason\n    $seasonYear: Int\n    $nextSeason: MediaSeason\n    $nextYear: Int\n  ) {\n    trending: Page(page: 1, perPage: 6) {\n      media(sort: TRENDING_DESC, type: ANIME, isAdult: false) {\n        ...media\n      }\n    }\n    season: Page(page: 1, perPage: 6) {\n      media(\n        season: $season\n        seasonYear: $seasonYear\n        sort: POPULARITY_DESC\n        type: ANIME\n        isAdult: false\n      ) {\n        ...media\n      }\n    }\n    nextSeason: Page(page: 1, perPage: 6) {\n      media(\n        season: $nextSeason\n        seasonYear: $nextYear\n        sort: POPULARITY_DESC\n        type: ANIME\n        isAdult: false\n      ) {\n        ...media\n      }\n    }\n    popular: Page(page: 1, perPage: 6) {\n      media(sort: POPULARITY_DESC, type: ANIME, isAdult: false) {\n        ...media\n      }\n    }\n    top: Page(page: 1, perPage: 10) {\n      media(sort: SCORE_DESC, type: ANIME, isAdult: false) {\n        ...media\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetHome(\n    $season: MediaSeason\n    $seasonYear: Int\n    $nextSeason: MediaSeason\n    $nextYear: Int\n  ) {\n    trending: Page(page: 1, perPage: 6) {\n      media(sort: TRENDING_DESC, type: ANIME, isAdult: false) {\n        ...media\n      }\n    }\n    season: Page(page: 1, perPage: 6) {\n      media(\n        season: $season\n        seasonYear: $seasonYear\n        sort: POPULARITY_DESC\n        type: ANIME\n        isAdult: false\n      ) {\n        ...media\n      }\n    }\n    nextSeason: Page(page: 1, perPage: 6) {\n      media(\n        season: $nextSeason\n        seasonYear: $nextYear\n        sort: POPULARITY_DESC\n        type: ANIME\n        isAdult: false\n      ) {\n        ...media\n      }\n    }\n    popular: Page(page: 1, perPage: 6) {\n      media(sort: POPULARITY_DESC, type: ANIME, isAdult: false) {\n        ...media\n      }\n    }\n    top: Page(page: 1, perPage: 10) {\n      media(sort: SCORE_DESC, type: ANIME, isAdult: false) {\n        ...media\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment media on Media {\n    id\n    title {\n      userPreferred\n      native\n    }\n    coverImage {\n      extraLarge\n      large\n      color\n    }\n    startDate {\n      year\n      month\n      day\n    }\n    endDate {\n      year\n      month\n      day\n    }\n    bannerImage\n    season\n    seasonYear\n    description\n    type\n    format\n    status(version: 2)\n    episodes\n    duration\n    chapters\n    volumes\n    genres\n    isAdult\n    averageScore\n    popularity\n    mediaListEntry {\n      id\n      status\n    }\n    nextAiringEpisode {\n      airingAt\n      timeUntilAiring\n      episode\n    }\n    studios(isMain: true) {\n      edges {\n        isMain\n        node {\n          id\n          name\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  fragment media on Media {\n    id\n    title {\n      userPreferred\n      native\n    }\n    coverImage {\n      extraLarge\n      large\n      color\n    }\n    startDate {\n      year\n      month\n      day\n    }\n    endDate {\n      year\n      month\n      day\n    }\n    bannerImage\n    season\n    seasonYear\n    description\n    type\n    format\n    status(version: 2)\n    episodes\n    duration\n    chapters\n    volumes\n    genres\n    isAdult\n    averageScore\n    popularity\n    mediaListEntry {\n      id\n      status\n    }\n    nextAiringEpisode {\n      airingAt\n      timeUntilAiring\n      episode\n    }\n    studios(isMain: true) {\n      edges {\n        isMain\n        node {\n          id\n          name\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query GetMedia($id: Int, $type: MediaType, $isAdult: Boolean) {\n    Media(id: $id, type: $type, isAdult: $isAdult) {\n      id\n      title {\n        userPreferred\n        romaji\n        english\n        native\n      }\n      coverImage {\n        extraLarge\n        large\n      }\n      bannerImage\n      startDate {\n        year\n        month\n        day\n      }\n      endDate {\n        year\n        month\n        day\n      }\n      description\n      season\n      seasonYear\n      type\n      format\n      status(version: 2)\n      episodes\n      duration\n      chapters\n      volumes\n      genres\n      synonyms\n      source(version: 3)\n      isAdult\n      isLocked\n      meanScore\n      averageScore\n      popularity\n      favourites\n      isFavouriteBlocked\n      hashtag\n      countryOfOrigin\n      isLicensed\n      isFavourite\n      isRecommendationBlocked\n      isFavouriteBlocked\n      isReviewBlocked\n      nextAiringEpisode {\n        airingAt\n        timeUntilAiring\n        episode\n      }\n      relations {\n        ...GetMediaOverviewRelations\n      }\n      characterPreview: characters(perPage: 6, sort: [ROLE, RELEVANCE, ID]) {\n        ...GetMediaOverviewCharacters\n      }\n      staffPreview: staff(perPage: 8, sort: [RELEVANCE, ID]) {\n        ...GetMediaOverviewStaffs\n      }\n      studios {\n        edges {\n          isMain\n          node {\n            id\n            name\n          }\n        }\n      }\n      reviewPreview: reviews(perPage: 2, sort: [RATING_DESC, ID]) {\n        pageInfo {\n          total\n        }\n        nodes {\n          id\n          summary\n          rating\n          ratingAmount\n          user {\n            id\n            name\n            avatar {\n              large\n            }\n          }\n        }\n      }\n      recommendations(perPage: 6, sort: [RATING_DESC, ID]) {\n        ...GetMediaOverviewRecommendations\n      }\n      externalLinks {\n        id\n        site\n        url\n        type\n        language\n        color\n        icon\n        notes\n        isDisabled\n      }\n      streamingEpisodes {\n        site\n        title\n        thumbnail\n        url\n      }\n      trailer {\n        ...GetMediaOverviewTrailer\n      }\n      rankings {\n        id\n        rank\n        type\n        format\n        year\n        season\n        allTime\n        context\n      }\n      tags {\n        id\n        name\n        description\n        rank\n        isMediaSpoiler\n        isGeneralSpoiler\n        userId\n      }\n      mediaListEntry {\n        id\n        status\n        score\n      }\n      stats {\n        statusDistribution {\n          status\n          amount\n        }\n        scoreDistribution {\n          score\n          amount\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query GetMedia($id: Int, $type: MediaType, $isAdult: Boolean) {\n    Media(id: $id, type: $type, isAdult: $isAdult) {\n      id\n      title {\n        userPreferred\n        romaji\n        english\n        native\n      }\n      coverImage {\n        extraLarge\n        large\n      }\n      bannerImage\n      startDate {\n        year\n        month\n        day\n      }\n      endDate {\n        year\n        month\n        day\n      }\n      description\n      season\n      seasonYear\n      type\n      format\n      status(version: 2)\n      episodes\n      duration\n      chapters\n      volumes\n      genres\n      synonyms\n      source(version: 3)\n      isAdult\n      isLocked\n      meanScore\n      averageScore\n      popularity\n      favourites\n      isFavouriteBlocked\n      hashtag\n      countryOfOrigin\n      isLicensed\n      isFavourite\n      isRecommendationBlocked\n      isFavouriteBlocked\n      isReviewBlocked\n      nextAiringEpisode {\n        airingAt\n        timeUntilAiring\n        episode\n      }\n      relations {\n        ...GetMediaOverviewRelations\n      }\n      characterPreview: characters(perPage: 6, sort: [ROLE, RELEVANCE, ID]) {\n        ...GetMediaOverviewCharacters\n      }\n      staffPreview: staff(perPage: 8, sort: [RELEVANCE, ID]) {\n        ...GetMediaOverviewStaffs\n      }\n      studios {\n        edges {\n          isMain\n          node {\n            id\n            name\n          }\n        }\n      }\n      reviewPreview: reviews(perPage: 2, sort: [RATING_DESC, ID]) {\n        pageInfo {\n          total\n        }\n        nodes {\n          id\n          summary\n          rating\n          ratingAmount\n          user {\n            id\n            name\n            avatar {\n              large\n            }\n          }\n        }\n      }\n      recommendations(perPage: 6, sort: [RATING_DESC, ID]) {\n        ...GetMediaOverviewRecommendations\n      }\n      externalLinks {\n        id\n        site\n        url\n        type\n        language\n        color\n        icon\n        notes\n        isDisabled\n      }\n      streamingEpisodes {\n        site\n        title\n        thumbnail\n        url\n      }\n      trailer {\n        ...GetMediaOverviewTrailer\n      }\n      rankings {\n        id\n        rank\n        type\n        format\n        year\n        season\n        allTime\n        context\n      }\n      tags {\n        id\n        name\n        description\n        rank\n        isMediaSpoiler\n        isGeneralSpoiler\n        userId\n      }\n      mediaListEntry {\n        id\n        status\n        score\n      }\n      stats {\n        statusDistribution {\n          status\n          amount\n        }\n        scoreDistribution {\n          score\n          amount\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment GetMediaOverviewRelations on MediaConnection {\n    edges {\n      id\n      relationType(version: 2)\n      node {\n        id\n        title {\n          userPreferred\n        }\n        format\n        type\n        status(version: 2)\n        bannerImage\n        coverImage {\n          large\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  fragment GetMediaOverviewRelations on MediaConnection {\n    edges {\n      id\n      relationType(version: 2)\n      node {\n        id\n        title {\n          userPreferred\n        }\n        format\n        type\n        status(version: 2)\n        bannerImage\n        coverImage {\n          large\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment GetMediaOverviewCharacters on CharacterConnection {\n    edges {\n      id\n      role\n      name\n      voiceActors(language: JAPANESE, sort: [RELEVANCE, ID]) {\n        id\n        name {\n          userPreferred\n        }\n        language: languageV2\n        image {\n          large\n        }\n      }\n      node {\n        id\n        name {\n          userPreferred\n        }\n        image {\n          large\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  fragment GetMediaOverviewCharacters on CharacterConnection {\n    edges {\n      id\n      role\n      name\n      voiceActors(language: JAPANESE, sort: [RELEVANCE, ID]) {\n        id\n        name {\n          userPreferred\n        }\n        language: languageV2\n        image {\n          large\n        }\n      }\n      node {\n        id\n        name {\n          userPreferred\n        }\n        image {\n          large\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment GetMediaOverviewStaffs on StaffConnection {\n    edges {\n      id\n      role\n      node {\n        id\n        name {\n          userPreferred\n        }\n        language: languageV2\n        image {\n          large\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  fragment GetMediaOverviewStaffs on StaffConnection {\n    edges {\n      id\n      role\n      node {\n        id\n        name {\n          userPreferred\n        }\n        language: languageV2\n        image {\n          large\n        }\n      }\n    }\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment GetMediaOverviewTrailer on MediaTrailer {\n    id\n    site\n  }\n"): (typeof documents)["\n  fragment GetMediaOverviewTrailer on MediaTrailer {\n    id\n    site\n  }\n"];
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  fragment GetMediaOverviewRecommendations on RecommendationConnection {\n    pageInfo {\n      total\n    }\n    nodes {\n      id\n      rating\n      userRating\n      mediaRecommendation {\n        id\n        title {\n          userPreferred\n        }\n        format\n        type\n        status(version: 2)\n        bannerImage\n        coverImage {\n          large\n        }\n      }\n      user {\n        id\n        name\n        avatar {\n          large\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  fragment GetMediaOverviewRecommendations on RecommendationConnection {\n    pageInfo {\n      total\n    }\n    nodes {\n      id\n      rating\n      userRating\n      mediaRecommendation {\n        id\n        title {\n          userPreferred\n        }\n        format\n        type\n        status(version: 2)\n        bannerImage\n        coverImage {\n          large\n        }\n      }\n      user {\n        id\n        name\n        avatar {\n          large\n        }\n      }\n    }\n  }\n"];

export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;